---
title: "CMA - Exercise 4"
author: "kinmar01"
editor: visual
format: 
  html:           
    toc: true 
    toc-depth: 2
    embed-resources: true
  pdf:           
    toc: true 
    toc-depth: 2
format-links: false
number-sections: true
bibliography: bibliography.bib
output-file: index
---

exercise 4, part of the course cma (mainly based on @Laube2014)

# Abstract {.unnumbered .unlisted}

# **Input: Segmentation**


You’ve read @LaubePurves2011 about segmenting trajectories. In the paper, the authors define “ *static* ” fixes as “ \* those whose average Euclidean distance to other fixes inside a temporal window v is less than some threshold d \* ”, as illustrated in @fig-laube-purves-2011

![The figure from Laube and Purves 2011 visualizes steps a) zu d), which will be explained bel](fig-laube-purves-2011.png){#fig-laube-purves-2011}

a.  Specify a temporal windows v for in which to measure Euclidean distances.
b.  Measure the distance from every point to every other point within this temporal window v.
c.  Remove “static points”:These are points where the average distance is less than a given threshold. This segments the trajectory into subtrajectories.
d.  Now remove short subtrajectories:These are trajectories with a short duration (whereas “short” is tbd).

We will \*\* demonstrate \*\* implementing this method on the wild boar “Sabi”, restricting ourselves to a couple of tracking days. Your task will be to understand this implementation and apply it to your own movement data.

Open a RStudio Project for this week. Next, copy the wild boar data you downloaded last week ( *wildschwein_BE_2056.csv* ) to your project folder. If you cannot find this dataset on your computer, you can re - download it from moodle. Transform the data into an `sf` object, filter for the wild boar Sabi and a datetime between “2015 - 07 - 01” and “2015 - 07 - 03”.

```{r}
pacman::p_load("readr", "sf", "dplyr", "ggplot2","RColorBrewer","tidyr")

theme_minimal() |> theme_set()
```

```{r}
wildschwein <- read_delim("data/wildschwein_BE_2056.csv", ",")


# Careful! What Timezone is assumed?
sabi <- wildschwein |>
st_as_sf(coords = c("E", "N"),
crs = 2056,
remove = FALSE) |>
filter(TierName == "Sabi",
DatetimeUTC >= "2015-07-01",
DatetimeUTC < "2015-07-03")

sabi |> summary()
sabi |> str()
```

```{r}
#| label: fig-sabi-1
#| fig-cap:  "Movement of the wild boar ‘Sabi’ in the timespan 01 - 02.07.2015. The cluster of dots / fixes are possible ‘static’ points"

sabi |>
ggplot(aes(E, N)) +
geom_point() +
geom_path() +
theme_minimal()
```

**Step a): Specify a temporal window** v

In the above dataset, the sampling interval is 15 minutes. If we take a temporal window of 60 minutes, that would mean including 4 fixes. We need to calculate the following Euclidean distances (pos representing single location):

1.  `pos[n-2]` to `pos[n]`
2.  `pos[n-1]` to `pos[n]`
3.  `pos[n]` to `pos[n+1]`
4.  `pos[n]` to `pos[n+2]`

**Step b): Measure the distance to every point within** v

We can use the function distance_by_element from week 2 in combination with `lead()` and `lag()` to calculate the Euclidean distance. For example, to create the necessary offset of n-2, we use `lag(x, 2)`. For each offset, we create one individual column.

```{r}
distance_by_element <- function(later, now) {
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
}


sabi <- sabi |>
  mutate(
    nMinus2 = distance_by_element(lag(geometry,2),geometry),
    nMinus1 = distance_by_element(lag(geometry,1),geometry),
    nPlus1 = distance_by_element(geometry,lead(geometry,1)),
    nPlus2 = distance_by_element(geometry,lead(geometry,2))
  )
```

Now we want to calculate the mean distance of `nMinus2`, `nMinus1`, `nPlus1`, `nPlus2` for each row. Since we want the mean value *per Row*, we have to explicitly specify this before `mutate()` with the function `rowwise()`. To remove this rowwise-grouping, we end the operation with `ungroup()`.

Note that for the first two positions, we cannot calculate a `stepMean` since there is no Position `n-2` for these positions. This is also true for the last to positions (lacking a position `n+2`).

```{r}
sabi <- sabi |>
  rowwise() |>
  mutate(
    stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
  ) |>
  ungroup()
```

**Step c): Remove “static points”**

We can now determine if an animal is moving or not by specifying a threshold distance on `stepMean`. In our example, we use the mean value as a threshold: Positions with distances below this value are considered static.

```{r}
sabi <- sabi |>
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

sabi_moving <- sabi |>
  filter(!static)

sabi_static <- sabi |>
  filter(static)
```

```{r}
#| label: fig-sabi-2
#| fig-cap: "The trajectory of sabi. Red dots are static points, the black dots signify moving points"

sabi_moving |>
  ggplot(aes(E, N)) +
  geom_point(data = sabi_static, col = "red") +
  geom_path() +
  geom_point() +
  coord_fixed() +
  theme(legend.position = "bottom")
```

# **Exercise A: Segmentation**

With the skills from Input: Segmentation you can now implement the segmentation algorithm described in Laube and Purves (2011) to either your own movement data or to a different wild boar using different sampling intervals.

## **Task 1: Calculate distances**

Now, you can Step a): Specify a temporal window v and Step b): Measure the distance to every point within v, which you had used with sabi, on on your own movement data or to a different wild boar using different sampling intervals.

```{r}
df_tannenhaeher <- read_delim("tannenhaeher.csv") |>
  st_as_sf(coords = c("x", "y"), crs = 2056, remove = FALSE)

df_tannenhaeher_K125864 <- df_tannenhaeher |>
  filter(ind_ident=="K125864")

df_tannenhaeher_K121752 <- df_tannenhaeher |>
  filter(ind_ident=="K121752")
```

```{r}
#| label: fig-nutcracker-K125864-1
#| fig-cap: "Movement of the Spotted Nutcracker K125864. The cluster of dots / fixes are possible ‘static’ points"

df_tannenhaeher_K125864 |>
  ggplot(aes(x,y)) +
  geom_point() +
  geom_path(alpha=0.4)
```

::: callout-tip
## move or stop

Ask chatGPT for a reasonable threshold beside mean, median and Q1
:::

```{r}
steps <- function(df) {
  df_updated <- df |>
    mutate(
      nMinus2 = distance_by_element(lag(geometry,2),geometry),
      nMinus1 = distance_by_element(lag(geometry,1),geometry),
      nPlus1 = distance_by_element(geometry,lead(geometry,1)),
      nPlus2 = distance_by_element(geometry,lead(geometry,2))
    ) |>
    rowwise() |>
    mutate(
      stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
    ) |>
    ungroup()|>
    mutate(
      mean = mean(stepMean, na.rm = TRUE),
      median = median(stepMean, na.rm = TRUE),
      Q1 = quantile(stepMean, 0.25, na.rm = TRUE),
      static = stepMean < Q1
    )
  
  return (df_updated)
}


df_tannenhaeher_K125864 <- df_tannenhaeher_K125864 |> steps()
df_tannenhaeher_K121752 <- df_tannenhaeher_K121752 |> steps()
```

## **Task 2: Specify and apply threshold *d***

After calculating the Euclidean distances to positions within the temporal window *v* in task 1, you can explore these values (we stored them in the column `stepMean`) using summary statistics (histograms, boxplot, `summary()`): This way we can define a reasonable threshold value to differentiate between *stops* and *moves*. There is no “correct” way of doing this, specifying a threshold always depends on data as well as the question that needs to be answered. In this exercise, use the mean of all `stepMean` values.

Store the new information (boolean to differentiate between stops (`TRUE`) and moves (`FALSE`)) in a new column named `static`.

```{r}
#| label: fig-nutcracker-charts
#| fig-cap: "Summary statistics for both spotted Nutcracker"
#| fig-subcap:
#|   - "Histogram"
#|   - "Boxplot"
#| layout-ncol: 2

df_spotted_nutcracker <- union(
  df_tannenhaeher_K121752,
  df_tannenhaeher_K125864
)

df_spotted_nutcracker|>
  ggplot(aes(stepMean)) +
  geom_histogram() +
  facet_wrap(.~ind_ident)

df_spotted_nutcracker |>
  ggplot(aes(ind_ident,stepMean))+
  geom_boxplot()
```

## **Task 3: Visualize segmented trajectories**

Now visualize the segmented trajectory spatially. Just like last week, you can use ggplot with `geom_path()`, `geom_point()` and `coord_equal()`. Assign `colour = static` within `aes()` to distinguish between segments *with* “movement” and *without*.

```{r}
#| label: fig-nutcracker-1
#| fig-cap: "The trajectory of Spotted Nutcracker K125864 & K121752.. Red dots are static points, the black dots signify moving points"


df_spotted_nutcracker|>
  filter(!static) |>
  ggplot(aes(x, y)) +
  geom_path(alpha=0.3) +
  geom_point() +
  geom_point(data = df_spotted_nutcracker |> filter(static), col = "red") +
  coord_equal()+
  facet_wrap(.~ind_ident)
```

## **Task 4: Segment-based analysis**

In applying @LaubePurves2011, we’ve come as far as step b) in @fig-laube-purves-2011. In order to complete the last steps (c and d), we need a *unique* ID for each segment that we can use as a grouping variable. The following function does just that (it assigns unique IDs based on the column `static` which you created in Task 2). You will learn about functions next week. For now, just copy the following code chunk into your script and run it.

```{r}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}
```

You can use the newly created function rle_id to assign unique IDs to subtrajectories (as shown below). Visualize the moving segments by colourizing them by segment_ID. Then use segment_ID as a grouping variable to determine the segments duration and remove short segments (e.g. segments with a duration < 5 Minutes)

```{r}
df_spotted_nutcracker_v2 <- union(
  df_tannenhaeher_K121752|>
    mutate(segment_id = rle_id(static)),
  df_tannenhaeher_K125864|>
    mutate(segment_id = rle_id(static))
)
```


```{r}
#| label: fig-nutcracker-2
#| fig-cap: "The trajectory of Spotted Nutcracker K125864 & K121752. Black dots are static points, moving points and trajectories are colorized by segment"

df_spotted_nutcracker_v2|>
  filter(!static) |>
  ggplot(aes(x, y, color=segment_id)) +
  geom_path(alpha=0.3) +
  geom_point() +
  geom_point(data = df_spotted_nutcracker |> filter(static), col = "black",alpha=0.3) +
  coord_equal()+
  facet_wrap(.~ind_ident)+
  theme(legend.position = "none")
  
```

```{r}
df_spotted_nutcracker_v2 <- df_spotted_nutcracker_v2 |> 
  group_by(segment_id,ind_ident) |> 
  mutate(
    duration = last(timestamp)-first(timestamp)
  ) |> 
  ungroup()
  
```


# **Exercise B: Similarity**

## **Task 1: Similarity measures**

We will now calculate similarties between trajectories using a new dataset pedestrian.csv (available on moodle). Download an import this dataset as a `data.frame` or `tibble`. It it a set of six different but similar trajectories from pedestrians walking on a path.

For this task, explore the trajectories in @fig-trajectories first and get an idea on how the pedestrians moved.


```{r}
df_pedestrian <- read_delim("data/pedestrian.csv") |>
  mutate(TrajID = as.factor(TrajID)) |> 
  st_as_sf(coords = c("E", "N"),crs = 2056,remove = FALSE) 
```


```{r}
#| label: fig-trajectories
#| fig-cap:  "Visual comparison of 6 trajectories. Each subplot highlights a trajectory"

df_pedestrian |> 
  ggplot(aes(E,N))+
  geom_point(data=df_pedestrian |> select(-TrajID),aes(E,N),alpha=0.1)+
  geom_point(aes(color=TrajID))+
  scale_color_brewer(palette = "Spectral") +
  coord_equal()+
  facet_wrap(.~TrajID)
```


## **Task 2: Calculate similarity**

Install the package `SimilarityMeasures` (`install.packages("SimilarityMeasures")`). Familiarize yourself with this package by skimming through the function descriptions `help(package = "SimilarityMeasures")`. Now compare trajectory 1 to trajectories 2-6 using different similarity measures from the package. Your options are. `DTW`, `EditDist`, `Frechet` and `LCSS`.

Before visualizing your results think about the following: Which two trajectories to you percieve to be most similar, which are most dissimilar? Now visualize the results from the computed similarity measures. Which measure reflects your own intuition the closest?

Note:

-   **All functions in the package need matrices as input, with one trajectory per matrix.**
-   `LCSS`takes very long to compute. The accuracy of the algorithm (`pointSpacing =` ,`pointDistance =` and `errorMarg =`) can be varied to provide faster calculations. Please see @vlachos2002 for more information.

```{r}
pacman::p_load("SimilarityMeasures")
```

```{r}
trajectories  <- df_pedestrian |> 
  group_by(TrajID) |> 
  summarise(geometry = list(matrix(c(E, N), ncol = 2, byrow = FALSE))) |> 
  ungroup() |> 
  pull(geometry)

results <- tibble(TrajID = 2:6) |> 
  rowwise() |> 
  mutate(
    DTW = DTW(trajectories[[1]], trajectories[[TrajID]]),
    EditDist = EditDist(trajectories[[1]], trajectories[[TrajID]]),
    Frechet = Frechet(trajectories[[1]], trajectories[[TrajID]])
#    LCSS = LCSS(trajectories[[1]], trajectories[[TrajID]])
  ) |> 
  ungroup() |> 
  mutate(
    TrajID = as.factor(TrajID)
  )
```


```{r}
#| label: fig-trajectories-similarity
#| fig-cap:  "Computed similarities using different measures between trajectory 1 to all other trajectories"
results |> 
  pivot_longer(cols = c(DTW, EditDist, Frechet), names_to = "Method", values_to = "Similarity") |> 
  ggplot(aes(TrajID, y = Similarity, fill = TrajID)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_brewer(palette = "Spectral") +
  theme_minimal() +
  facet_wrap(.~Method, scales="free")+
  labs(x = "Verglichene Trajektorie", y = "Ähnlichkeitswert")

```


# **References**

::: {#refs}
:::
